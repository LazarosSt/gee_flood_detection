/*
***************************************************************************
  IMPORTS
***************************************************************************
*/


var CASE_STUDIES = require("users/stamlazaros/hua:t-h-e-s-i-s/configurations/case_studies");
var S1_UTILITIES = require("users/stamlazaros/hua:t-h-e-s-i-s/utilities/s1");


/*
**********************************************************************
  PARAMETERS
**********************************************************************
*/


// `Digital Elevation Model`
var demProvider = "USGS";

// `Sentinel-1 GRD`
var identifiers = [
  "S1A_IW_GRDH_1SDV_20230901T043132_20230901T043157_050129_060869_9987",
  "S1A_IW_GRDH_1SDV_20230901T043157_20230901T043222_050129_060869_CFB9",
  "S1A_IW_GRDH_1SDV_20230906T043947_20230906T044012_050202_060AD8_440E",
  "S1A_IW_GRDH_1SDV_20230906T044012_20230906T044037_050202_060AD8_49FE",
  "S1A_IW_GRDH_1SDV_20230907T162437_20230907T162502_050224_060B99_3635",
  "S1A_IW_GRDH_1SDV_20230907T162412_20230907T162437_050224_060B99_D80F",
  "S1A_IW_GRDH_1SDV_20230913T043132_20230913T043157_050304_060E62_436A",
  "S1A_IW_GRDH_1SDV_20230913T043157_20230913T043222_050304_060E62_258F",
  "S1A_IW_GRDH_1SDV_20230918T043947_20230918T044012_050377_0610CC_B50A",
  "S1A_IW_GRDH_1SDV_20230918T044012_20230918T044037_050377_0610CC_49B6"
];

var b1 = "VV";
var b2 = "VH";


/*
********************************************************************
  CONFIGURATION
********************************************************************
*/


// `Digital Elevation Models`
var demConfigs = {
  CGIAR: {    // `SRTM Digital Elevation Data Version 4`
    name: "CGIAR/SRTM90_V4"
  },
  USGS: {     // `NASA SRTM Digital Elevation`
    name: "USGS/SRTMGL1_003"
  },
  NASA: {     // `NASA NASADEM Digital Elevation`
    name: "NASA/NASADEM_HGT/001"
  },
  ASTER: {    // `AG100: ASTER Global Emissivity Dataset 100-meter V003`
    name: "NASA/ASTER_GED/AG100_003"
  }
};

// `Sentinel-1 GRD`
var s1Config = {
  name: "COPERNICUS/S1_GRD"
};

var s1Visualization = {
  min: [-25, -25, 0],
  max: [0, 0, 2],
  bands: ["VV", "VH", "VVVHQ"]
};

// GEE assets.
var demConfig = demConfigs[demProvider];


/*
****************************************************************
  COMPUTATIONS
****************************************************************
*/


// Engineer new bands.

var quotientExpression = S1_UTILITIES.bandCombinations.quotient.expression;
var quotientName = S1_UTILITIES.bandCombinations.quotient.name;

// Load, filter and process raster collections.

// `Digital Elevation`
var elevation = ee.Image(demConfig.name);

// `Sentinel-1 GRD`
var collection = ee.ImageCollection(s1Config.name)
  .filter(ee.Filter.inList("system:index", identifiers))
  // Engineer new bands.
  .map(function(raster){
    // `VVVHQ`
    var quotient = ee.Image().expression({
        expression: quotientExpression,
        map: {
          b1: raster.select(b1),
          b2: raster.select(b2)
        }
      }).rename(quotientName.replace("b1", b1).replace("b2", b2));

    return raster.addBands([quotient]);
  });

var procCollection = collection
  // Process rasters.
  .map(function(raster){
    // Remove the alpha value from the `angle` band.
    raster = raster.addBands({
      srcImg: raster.select("angle").updateMask(raster.select("angle").mask().gt(0)),
      overwrite: true,
    });

    // Apply angular-based radiometric slope correction.
    var geometry = raster.geometry();
    var localElevation = elevation.clip(geometry).unmask();
    raster = S1_UTILITIES.slope_correction(raster, localElevation);

    // Apply a Refined-Lee speckle filter to reduce noise.
    var propertyNames = raster.propertyNames();
    raster = S1_UTILITIES.refined_lee(raster);
    return ee.Image(raster).copyProperties(raster, propertyNames);
  });

var rasters = collection.toList(collection.size());
var procRasters = procCollection.toList(procCollection.size());


/*
***************************************************************
  CONSOLE
***************************************************************
*/


print("*collections*");
print("S1-GRD:", collection);
print("S1-GRD (proc):", procCollection);


/*
**************************************************************
  VISUALIZATION
**************************************************************
*/


// Create map subpanels and connect them.
var lSubPanel = ui.Map();
var rSubPanel = ui.Map();

lSubPanel.drawingTools().setLinked(true);
rSubPanel.drawingTools().setLinked(true);

var linker = ui.Map.Linker([lSubPanel, rSubPanel]);

// Set a custom split panel as the root widget.
var splitPanel = ui.SplitPanel({
  firstPanel: linker.get(0),
  secondPanel: linker.get(1),
  orientation: "horizontal",
  wipe: true,
  style: {stretch: "both"}
});

ui.root.widgets().reset([splitPanel]);
lSubPanel.centerObject(collection);

// Populate subpanels.
identifiers.forEach(function(identifier){
  var raster = collection.filter(ee.Filter.eq("system:index", identifier)).first();
  var procRaster = procCollection.filter(ee.Filter.eq("system:index", identifier)).first();

  lSubPanel.addLayer(raster, s1Visualization, identifier);
  rSubPanel.addLayer(procRaster, s1Visualization, identifier);
});
