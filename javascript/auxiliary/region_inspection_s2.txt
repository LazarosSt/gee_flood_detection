/*
**********************************************************************
  IMPORTS
**********************************************************************
*/


var TXT_PACKAGE = require("users/gena/packages:text");
var CASE_STUDIES = require("users/stamlazaros/hua:t-h-e-s-i-s/configurations/case_studies");


/*
*********************************************************************
  FUNCTIONS
*********************************************************************
*/


function translate(pt, dx, dy) {
  /*
  Description:
    Translates a point by the specified displacement along the x and y axes.

  Parameters:
    pt (ee.List): A list of coordinates representing the original point.
    dx (float): The displacement along the x axis.
    dy (float): The displacement along the y axis.

  Returns:
    An ee.Geometry.Point object representing the translated point.
  */

  var x1 = ee.Number(pt.get(0)).subtract(dx);
  var y1 = ee.Number(pt.get(1)).subtract(dy);

  return ee.Geometry.Point(ee.List([x1, y1]));
}


/*
**********************************************************************
  PARAMETERS
**********************************************************************
*/


// `Harmonized Sentinel-2 MSI Level-2A`
var startDate = "2023-09-01";
var endDate = "2023-09-11";

// Runtime stuff.
var scale = 1000;
var minObservations = 0;
var maxObservations = 11;


/*
********************************************************************
  CONFIGURATION
********************************************************************
*/


// `Harmonized Sentinel-2 MSI Level-2A`
var config = {
  name: "COPERNICUS/S2_SR_HARMONIZED"
};

var props = {
  textColor: "000000",
  outlineColor: "ffffff",
  outlineWidth: 5,
  outlineOpacity: 0.4
};

var coverageVisualization = {
  min: 1,
  max: 11,
  palette: [
    "a50026", "d73027", "f46d43", "fdae61",
    "fee08b", "ffffbf", "d9ef8b", "a6d96a",
    "66bd63", "1a9850", "006837"
  ]
};

var MGRS = ee.FeatureCollection("users/stamlazaros/hua/t-h-e-s-i-s/utilities/MGRS");


/*
****************************************************************
  COMPUTATIONS
****************************************************************
*/


// Load, filter and process the raster collections.

// `Harmonized Sentinel-2 MSI Level-2A`
var collection = ee.ImageCollection(config.name)
  .filterDate(startDate, endDate)
  .filterBounds(geometry)
  .map(function(raster){
    var orbitNumber = raster.getNumber("SENSING_ORBIT_NUMBER").format();
    var mgrsTile = raster.getString("MGRS_TILE");

    raster = raster.set("acquisition", raster.date().format("YYYY-MM-dd"));
    raster = raster.set("tileIdentifier", orbitNumber.cat("_").cat(mgrsTile));

    return raster;
  });

var orbitNumbers = collection.aggregate_array("SENSING_ORBIT_NUMBER").distinct();
var orbitNumbersStr = orbitNumbers.map(function(orbit){
  return ee.Number(orbit).format("%.0f");
});

var tileIdentifiers = collection.aggregate_array("MGRS_TILE").distinct();
var mgrsTiles = MGRS.filter(ee.Filter.inList("Name", tileIdentifiers));

// Calculate coverage.
var coverage = ee.FeatureCollection(collection)
  .reduceToImage(["PRODUCT_ID"], ee.Reducer.count());

// Filter tile centroids.
var centroids = mgrsTiles
  .map(function(feature){
    var centroid = feature.geometry().centroid();
    return feature.setGeometry(centroid);
  });

// Group data by specific attributes.

// Raster identifiers.
var rasterIdentifiers = tileIdentifiers.map(function(identifier){
  return collection
    .filter(ee.Filter.eq("MGRS_TILE", identifier))
    .aggregate_array("PRODUCT_ID");
});

// Acquisition dates.
var rasterAcquisitions = tileIdentifiers.map(function(identifier){
  return collection
    .filter(ee.Filter.eq("MGRS_TILE", identifier))
    .aggregate_array("acquisition");
});

// Tile orbits.
var tileOrbits = orbitNumbers.map(function(orbit){
  return collection
    .filter(ee.Filter.eq("SENSING_ORBIT_NUMBER", orbit))
    .aggregate_array("MGRS_TILE").distinct();
});


/*
***************************************************************
                             CONSOLE
***************************************************************
*/


print("**Raster identifiers**");
print("grouped:", ee.Dictionary.fromLists(tileIdentifiers, rasterIdentifiers));
print("ungrouped:", collection.aggregate_array("PRODUCT_ID"));

print("raster acquisitions:", ee.Dictionary.fromLists(tileIdentifiers, rasterAcquisitions));
print("tile orbits:", ee.Dictionary.fromLists(orbitNumbersStr, tileOrbits));
print("tile centroids:", centroids);


/*
**************************************************************
  VISUALIZATION
**************************************************************
*/


// Generate a custom data availability legend.

// Create the legend colour bar.
var colorBar = ui.Thumbnail({
  image: ee.Image.pixelLonLat().select("longitude").int(),
  style: {stretch: "horizontal", maxHeight: "25px"},
  params: {
    bbox: [0, 0, maxObservations, 1],
    palette: coverageVisualization.palette,
    dimensions: "100x10",
    format: "png",
    min: minObservations,
    max: maxObservations
  }
});

// Create min and max values labels.
var legendLabels = ui.Panel({
  widgets: [
    ui.Label(minObservations, {margin: "4px 8px"}),
    ui.Label("", {margin: "4px 8px", textAlign: "center", stretch: "horizontal"}),
    ui.Label(maxObservations, {margin: "4px 8px"})
  ],
  layout: ui.Panel.Layout.flow("horizontal")
});

// Add legend title.
var legendTitle = ui.Label({
  value: "Observations:",
  style: {fontWeight: "bold"}
});

// Construct legend.
var legend = ui.Panel([legendTitle, colorBar, legendLabels]);

Map.centerObject(geometry);
Map.add(legend);

var mgrsGrid = mgrsTiles.map(function(tile){
  // Extract geometries.
  var geom = tile.geometry();
  var centroidCoords = geom.centroid().coordinates();

  // Create an edge raster mask.
  var edge = ee.Image(0).toByte().paint(geom, 1, 2);
  edge = edge.selfMask().visualize({palette:["black"]});

  // Translate centroid coordinates and add text.
  var pos = translate(centroidCoords, 0, 0);
  var orbitDescription = tile.get("Name");
  var textDate = TXT_PACKAGE.draw(orbitDescription, pos, scale, props);

  return ee.ImageCollection([edge, textDate]).mosaic();
});

Map.addLayer(coverage.updateMask(coverage.gt(0)), coverageVisualization, "rasters: ascending coverage");
Map.addLayer(ee.ImageCollection(mgrsGrid), {color:"black"}, "rasters: ascending tiles");
Map.addLayer(centroids, {color: "black"}, "vectors: asceding centroids");
